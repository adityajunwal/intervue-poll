import React, { useState, useEffect } from "react";
import { io } from "socket.io-client";
import "./StudentScreen.css"

const socket = io("https://intervue-poll-y4pz.onrender.com", {
  transports: ["websocket"],
});

// const socket = io("http://localhost:3000")

function StudentScreen() {
    const [name, setName] = useState("");
    const [joined, setJoined] = useState(false);
    const [currentPoll, setCurrentPoll] = useState(null);
    const [selectedOption, setSelectedOption] = useState("");
    const [results, setResults] = useState(null);
    const [hasSubmitted, setHasSubmitted] = useState(false)

    const [timeLeft, setTimeLeft] = useState(0);

    useEffect(() => {
        let timer;
        if (currentPoll) {
            setTimeLeft(currentPoll.duration);
            console.log(currentPoll)
            timer = setInterval(() => {
                setTimeLeft(prev => {
                    if (prev <= 1) {
                        clearInterval(timer);
                        return 0;
                    }
                    return prev - 1;
                });
            }, 1000);
        }

        return () => clearInterval(timer);
    }, [currentPoll]);

    useEffect(() => {
        const handleNewPoll = (poll) => {
            setCurrentPoll(poll);
            setSelectedOption("");
            setHasSubmitted(false);
            setResults(null);
        };

        const handleUpdateResults = (data) => {
            setResults(data.pollResults);
        };

        const handleError = (err) => alert(err);

        socket.on("poll:new", handleNewPoll);
        socket.on("poll:update_results", handleUpdateResults);
        socket.on("poll:error", handleError);

        return () => {
            socket.off("poll:new", handleNewPoll);
            socket.off("poll:update_results", handleUpdateResults);
            socket.off("poll:error", handleError);
        };
    }, []);


    const joinStudent = () => {
        if (!name.trim()) return alert("Enter a name");
        setJoined(true);
    };

    const submitAnswer = () => {
        if (!selectedOption) return alert("Select an option");
        socket.emit("student:submit_answer", { studentName: name, answer: selectedOption });
        setHasSubmitted(true);
    };

    if (!joined) {
        return (
            <div className="container">
                <div className='intervue-logo'>
                    <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12.2762 8.76363C12.2775 8.96965 12.2148 9.17098 12.0969 9.33992C11.979 9.50887 11.8116 9.63711 11.6178 9.707L8.35572 10.907L7.15567 14.1671C7.08471 14.3604 6.95614 14.5272 6.78735 14.645C6.61855 14.7628 6.41766 14.826 6.21181 14.826C6.00596 14.826 5.80506 14.7628 5.63627 14.645C5.46747 14.5272 5.33891 14.3604 5.26794 14.1671L4.06537 10.9111L0.804778 9.71104C0.611716 9.63997 0.445097 9.5114 0.327404 9.34266C0.20971 9.17392 0.146606 8.97315 0.146606 8.76742C0.146606 8.56169 0.20971 8.36092 0.327404 8.19218C0.445097 8.02345 0.611716 7.89487 0.804778 7.82381L4.06688 6.62376L5.26693 3.36418C5.33799 3.17112 5.46657 3.0045 5.6353 2.88681C5.80404 2.76911 6.00482 2.70601 6.21054 2.70601C6.41627 2.70601 6.61705 2.76911 6.78578 2.88681C6.95452 3.0045 7.08309 3.17112 7.15416 3.36418L8.35421 6.62629L11.6138 7.82633C11.8074 7.8952 11.9749 8.02223 12.0935 8.19003C12.2121 8.35782 12.2759 8.55817 12.2762 8.76363ZM8.73923 2.70024H9.7498V3.71081C9.7498 3.84482 9.80303 3.97334 9.89779 4.06809C9.99255 4.16285 10.1211 4.21609 10.2551 4.21609C10.3891 4.21609 10.5176 4.16285 10.6124 4.06809C10.7071 3.97334 10.7604 3.84482 10.7604 3.71081V2.70024H11.7709C11.9049 2.70024 12.0335 2.64701 12.1282 2.55225C12.223 2.45749 12.2762 2.32897 12.2762 2.19496C12.2762 2.06095 12.223 1.93243 12.1282 1.83767C12.0335 1.74291 11.9049 1.68968 11.7709 1.68968H10.7604V0.679111C10.7604 0.545101 10.7071 0.416581 10.6124 0.321822C10.5176 0.227063 10.3891 0.173828 10.2551 0.173828C10.1211 0.173828 9.99255 0.227063 9.89779 0.321822C9.80303 0.416581 9.7498 0.545101 9.7498 0.679111V1.68968H8.73923C8.60522 1.68968 8.4767 1.74291 8.38194 1.83767C8.28718 1.93243 8.23395 2.06095 8.23395 2.19496C8.23395 2.32897 8.28718 2.45749 8.38194 2.55225C8.4767 2.64701 8.60522 2.70024 8.73923 2.70024ZM14.2973 4.72137H13.7921V4.21609C13.7921 4.08208 13.7388 3.95356 13.6441 3.8588C13.5493 3.76404 13.4208 3.71081 13.2868 3.71081C13.1528 3.71081 13.0242 3.76404 12.9295 3.8588C12.8347 3.95356 12.7815 4.08208 12.7815 4.21609V4.72137H12.2762C12.1422 4.72137 12.0137 4.77461 11.9189 4.86937C11.8242 4.96412 11.7709 5.09264 11.7709 5.22665C11.7709 5.36066 11.8242 5.48918 11.9189 5.58394C12.0137 5.6787 12.1422 5.73194 12.2762 5.73194H12.7815V6.23722C12.7815 6.37123 12.8347 6.49975 12.9295 6.59451C13.0242 6.68927 13.1528 6.7425 13.2868 6.7425C13.4208 6.7425 13.5493 6.68927 13.6441 6.59451C13.7388 6.49975 13.7921 6.37123 13.7921 6.23722V5.73194H14.2973C14.4313 5.73194 14.5599 5.6787 14.6546 5.58394C14.7494 5.48918 14.8026 5.36066 14.8026 5.22665C14.8026 5.09264 14.7494 4.96412 14.6546 4.86937C14.5599 4.77461 14.4313 4.72137 14.2973 4.72137Z" fill="white" />
                    </svg>
                    <span>Intervue Poll</span>
                </div>
                <h1>Let's <span>Get Started</span></h1>
                <p className="display-text" style={{ color: "#5C5B5B" }}>If you're a student, you'll be able to <span style={{ color: "#000000" }}>submit your answers</span>, participate in live polls, and see how your reponses compare with your classmates</p>
                <h3>Enter your Name</h3>
                <input id="name-field" value={name} onChange={(e) => setName(e.target.value)} />
                <button className="continue-btn" onClick={joinStudent}>Continue</button>
            </div>
        );
    }

    if (!currentPoll) {
        return (
            <>
                <div className="container">
                    <div className='intervue-logo'>
                        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12.2762 8.76363C12.2775 8.96965 12.2148 9.17098 12.0969 9.33992C11.979 9.50887 11.8116 9.63711 11.6178 9.707L8.35572 10.907L7.15567 14.1671C7.08471 14.3604 6.95614 14.5272 6.78735 14.645C6.61855 14.7628 6.41766 14.826 6.21181 14.826C6.00596 14.826 5.80506 14.7628 5.63627 14.645C5.46747 14.5272 5.33891 14.3604 5.26794 14.1671L4.06537 10.9111L0.804778 9.71104C0.611716 9.63997 0.445097 9.5114 0.327404 9.34266C0.20971 9.17392 0.146606 8.97315 0.146606 8.76742C0.146606 8.56169 0.20971 8.36092 0.327404 8.19218C0.445097 8.02345 0.611716 7.89487 0.804778 7.82381L4.06688 6.62376L5.26693 3.36418C5.33799 3.17112 5.46657 3.0045 5.6353 2.88681C5.80404 2.76911 6.00482 2.70601 6.21054 2.70601C6.41627 2.70601 6.61705 2.76911 6.78578 2.88681C6.95452 3.0045 7.08309 3.17112 7.15416 3.36418L8.35421 6.62629L11.6138 7.82633C11.8074 7.8952 11.9749 8.02223 12.0935 8.19003C12.2121 8.35782 12.2759 8.55817 12.2762 8.76363ZM8.73923 2.70024H9.7498V3.71081C9.7498 3.84482 9.80303 3.97334 9.89779 4.06809C9.99255 4.16285 10.1211 4.21609 10.2551 4.21609C10.3891 4.21609 10.5176 4.16285 10.6124 4.06809C10.7071 3.97334 10.7604 3.84482 10.7604 3.71081V2.70024H11.7709C11.9049 2.70024 12.0335 2.64701 12.1282 2.55225C12.223 2.45749 12.2762 2.32897 12.2762 2.19496C12.2762 2.06095 12.223 1.93243 12.1282 1.83767C12.0335 1.74291 11.9049 1.68968 11.7709 1.68968H10.7604V0.679111C10.7604 0.545101 10.7071 0.416581 10.6124 0.321822C10.5176 0.227063 10.3891 0.173828 10.2551 0.173828C10.1211 0.173828 9.99255 0.227063 9.89779 0.321822C9.80303 0.416581 9.7498 0.545101 9.7498 0.679111V1.68968H8.73923C8.60522 1.68968 8.4767 1.74291 8.38194 1.83767C8.28718 1.93243 8.23395 2.06095 8.23395 2.19496C8.23395 2.32897 8.28718 2.45749 8.38194 2.55225C8.4767 2.64701 8.60522 2.70024 8.73923 2.70024ZM14.2973 4.72137H13.7921V4.21609C13.7921 4.08208 13.7388 3.95356 13.6441 3.8588C13.5493 3.76404 13.4208 3.71081 13.2868 3.71081C13.1528 3.71081 13.0242 3.76404 12.9295 3.8588C12.8347 3.95356 12.7815 4.08208 12.7815 4.21609V4.72137H12.2762C12.1422 4.72137 12.0137 4.77461 11.9189 4.86937C11.8242 4.96412 11.7709 5.09264 11.7709 5.22665C11.7709 5.36066 11.8242 5.48918 11.9189 5.58394C12.0137 5.6787 12.1422 5.73194 12.2762 5.73194H12.7815V6.23722C12.7815 6.37123 12.8347 6.49975 12.9295 6.59451C13.0242 6.68927 13.1528 6.7425 13.2868 6.7425C13.4208 6.7425 13.5493 6.68927 13.6441 6.59451C13.7388 6.49975 13.7921 6.37123 13.7921 6.23722V5.73194H14.2973C14.4313 5.73194 14.5599 5.6787 14.6546 5.58394C14.7494 5.48918 14.8026 5.36066 14.8026 5.22665C14.8026 5.09264 14.7494 4.96412 14.6546 4.86937C14.5599 4.77461 14.4313 4.72137 14.2973 4.72137Z" fill="white" />
                        </svg>
                        <span>Intervue Poll</span>
                    </div>
                    <div className="loader"></div>
                    <p style={{ fontWeight: "600" }}>Waiting for teacher to ask questions...</p>
                </div>
            </>
        )
    }

    return (
        <>
            {(!hasSubmitted && timeLeft > 0) ? (

                <>
                    <div className="question-container">
                        <div className="question-heading">
                            <div>Question</div>
                            <div className="timer">
                                <svg width="16" height="21" viewBox="0 0 16 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M14.3 7.07975L15.21 6.17975C15.3983 5.99144 15.5041 5.73605 15.5041 5.46975C15.5041 5.20344 15.3983 4.94805 15.21 4.75975C15.0217 4.57144 14.7663 4.46565 14.5 4.46565C14.2337 4.46565 13.9783 4.57144 13.79 4.75975L12.89 5.66975C11.4886 4.5856 9.76687 3.99738 7.99503 3.99738C6.22318 3.99738 4.50147 4.5856 3.10003 5.66975L2.19003 4.74975C2.0004 4.56144 1.74373 4.45618 1.47649 4.45712C1.20925 4.45806 0.95333 4.56512 0.765026 4.75475C0.576722 4.94438 0.471462 5.20104 0.472399 5.46828C0.473337 5.73552 0.580396 5.99144 0.770026 6.17975L1.69003 7.08975C0.593042 8.48729 -0.00218316 10.2131 2.6229e-05 11.9897C-0.00323946 13.2652 0.29849 14.5229 0.88005 15.658C1.46161 16.7931 2.30614 17.7728 3.34322 18.5152C4.38029 19.2576 5.57985 19.7413 6.84184 19.926C8.10383 20.1106 9.39168 19.9908 10.598 19.5766C11.8043 19.1624 12.8941 18.4658 13.7764 17.5449C14.6588 16.624 15.3082 15.5054 15.6705 14.2825C16.0328 13.0596 16.0974 11.7678 15.859 10.5149C15.6206 9.26194 15.0861 8.08415 14.3 7.07975ZM8.00003 17.9897C6.81334 17.9897 5.6533 17.6379 4.6666 16.9786C3.67991 16.3193 2.91087 15.3822 2.45675 14.2858C2.00262 13.1895 1.8838 11.9831 2.11531 10.8192C2.34683 9.65532 2.91827 8.58622 3.75739 7.74711C4.5965 6.90799 5.6656 6.33655 6.82948 6.10503C7.99337 5.87352 9.19977 5.99234 10.2961 6.44647C11.3925 6.90059 12.3296 7.66963 12.9888 8.65632C13.6481 9.64302 14 10.8031 14 11.9897C14 13.581 13.3679 15.1072 12.2427 16.2324C11.1174 17.3576 9.59133 17.9897 8.00003 17.9897ZM6.00003 2.98975H10C10.2652 2.98975 10.5196 2.88439 10.7071 2.69685C10.8947 2.50932 11 2.25496 11 1.98975C11 1.72453 10.8947 1.47018 10.7071 1.28264C10.5196 1.0951 10.2652 0.989746 10 0.989746H6.00003C5.73481 0.989746 5.48046 1.0951 5.29292 1.28264C5.10538 1.47018 5.00003 1.72453 5.00003 1.98975C5.00003 2.25496 5.10538 2.50932 5.29292 2.69685C5.48046 2.88439 5.73481 2.98975 6.00003 2.98975ZM9.00003 8.98975C9.00003 8.72453 8.89467 8.47018 8.70713 8.28264C8.5196 8.0951 8.26524 7.98975 8.00003 7.98975C7.73481 7.98975 7.48046 8.0951 7.29292 8.28264C7.10538 8.47018 7.00003 8.72453 7.00003 8.98975V10.8797C6.7736 11.0823 6.614 11.3488 6.54235 11.644C6.47069 11.9392 6.49037 12.2492 6.59877 12.533C6.70717 12.8168 6.89918 13.061 7.14939 13.2333C7.39961 13.4055 7.69624 13.4978 8.00003 13.4978C8.30381 13.4978 8.60044 13.4055 8.85066 13.2333C9.10088 13.061 9.29289 12.8168 9.40129 12.533C9.50968 12.2492 9.52936 11.9392 9.45771 11.644C9.38606 11.3488 9.22646 11.0823 9.00003 10.8797V8.98975Z" fill="black" />
                                </svg>
                                <div className="rem-time">{timeLeft ? `${timeLeft} seconds` : "0 seconds"}</div>
                            </div>
                        </div>

                        <div className="inner-container">
                            <p className="ques-text">
                                <h4>{currentPoll.question}</h4>
                            </p>
                            {currentPoll.options.map((opt, idx) => (
                                <div key={idx}>
                                    <div
                                        className="vote-bar"
                                        id="option-bar"
                                        onClick={() => setSelectedOption(opt)}
                                        style={
                                            {
                                                border: (selectedOption === opt)
                                                    ? "1px solid black"
                                                    : "none"

                                            }
                                        }
                                    >
                                        <span className="opt-marker">
                                            <span id="opt-num">
                                                {idx + 1}
                                            </span>
                                            <span className="option-text">
                                                {opt}
                                            </span>
                                        </span>

                                    </div>
                                </div>
                            ))}
                        </div>
                        <div className="btn-div">
                            <button
                                className="ask-another-btn"
                                onClick={submitAnswer}
                            >Submit</button>
                        </div>
                    </div>
                </>

            ) : (


                <>
                    <div className="question-container">
                        <h3 className="que-text">Question</h3>
                        <div className="inner-container">
                            <p className="ques-text">
                                <h4>{currentPoll.question}</h4>
                            </p>
                            {currentPoll.options.map((opt, idx) => (
                                <div key={idx}>
                                    <div className="vote-bar">
                                        <div
                                            className="vote-fill"
                                            style={{
                                                width: results
                                                    ? `${(results[opt] / Math.max(1, Object.values(results).reduce((a, b) => a + b))) * 100}%`
                                                    : "0%",
                                                color: results && Object.values(results).reduce((a, b) => a + b, 0) > 0 &&
                                                    (results[opt] / Object.values(results).reduce((a, b) => a + b, 0)) * 100 > 0
                                                    ? "white"
                                                    : "black"
                                            }}
                                        >
                                            <span className="opt-marker">
                                                <span id="opt-num">
                                                    {idx + 1}
                                                </span>
                                                <span className="option-text">
                                                    {opt}
                                                </span>
                                            </span>
                                        </div>
                                        <span>
                                            {results
                                                ? `${(results[opt] / Math.max(1, Object.values(results).reduce((a, b) => a + b))) * 100}%`
                                                : "0%"
                                            }
                                        </span>
                                    </div>
                                </div>
                            ))}
                        </div>
                        <p style={{ fontWeight: "600", marginTop: "20px" }}>Waiting for teacher to ask new question</p>
                    </div>
                </>
            )}
        </>
    );
}

export default StudentScreen;
